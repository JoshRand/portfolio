{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { Slide } from \"../model/slide\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PortfolioService = /*#__PURE__*/(() => {\n  class PortfolioService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.PORTFOLIO_DATABASE_URI = environment.BASE_URL_BACKEND;\n      this.headers = new HttpHeaders();\n    }\n    getProjects() {\n      console.log(\"getting all projects from \" + this.PORTFOLIO_DATABASE_URI);\n      this.headers.set(\"Content-Type\", \"application/json\");\n      return this.httpClient.get(this.PORTFOLIO_DATABASE_URI.replace(\"localhost/\", \"\") + \"/projects\");\n    }\n    getProject(projectId) {\n      console.log(\"Attempting to retrieve project #\" + projectId);\n      console.log(this.PORTFOLIO_DATABASE_URI.replace(\"localhost/\", \"\") + \"project?id=\" + projectId);\n      this.headers.set(\"Content-Type\", \"application/json\");\n      this.projectDataSource = this.httpClient.get(this.PORTFOLIO_DATABASE_URI.replace(\"localhost/\", \"\") + \"/project?id=\" + projectId);\n      return this.projectDataSource;\n    }\n    saveProject(project) {\n      return this.httpClient.put(this.PORTFOLIO_DATABASE_URI + \"project\", project);\n    }\n    deleteImage(image_url, project_id) {\n      this.slide = new Slide(\"\", image_url);\n      return this.httpClient.request('DELETE', this.PORTFOLIO_DATABASE_URI + \"slide/\" + project_id, {\n        body: this.slide\n      });\n    }\n    createSlide(slide, project_id) {\n      return this.httpClient.post(this.PORTFOLIO_DATABASE_URI + \"slide/\" + project_id, slide);\n    }\n    saveSlide(slide) {\n      return this.httpClient.put(this.PORTFOLIO_DATABASE_URI + \"slide\", slide);\n    }\n  }\n  PortfolioService.ɵfac = function PortfolioService_Factory(t) {\n    return new (t || PortfolioService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  PortfolioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PortfolioService,\n    factory: PortfolioService.ɵfac,\n    providedIn: \"root\"\n  });\n  return PortfolioService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}