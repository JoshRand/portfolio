version: '3.1'

services:
  backend:
    build: backend
    restart: always
    env_file:
      - variables.env
    networks:
      - angular-spring
      - spring-mysql
    ports:
      - 8080:8080
    expose:
      - 8080
    depends_on:
      db:
        condition: service_healthy

  db:
    image: mysql
    ports:
      - 3306:3306
    env_file:
      - variables.env
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent"]
      interval: 3s
      retries: 5
      start_period: 30s
    volumes:
      - ./mysql-dump:/docker-entrypoint-initdb.d
    networks:
      - spring-mysql

  frontend:
    build:
      context: frontend
    # restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      #- "4200:4200"
    volumes:
      - certs:/etc/letsencrypt
      - dhparam:/etc/ssl/certs
      # - frontend-data:/usr/share/nginx/html
    environment:
      - BASE_URL_BACKEND=backend
    networks:
      - angular-spring
    depends_on:
      - backend
    expose:
        #- 4200
        #- 42000 
      - 80
      - 443

  # certbot:
  #   image: certbot/certbot
  #   container_name: certbot
  #   volumes:
  #     - certbot-etc:/etc/letsencrypt
  #     - certbot-var:/var/lib/letsencrypt
  #     - frontend-data:/usr/share/nginx/html
  #   depends_on:
  #     - frontend
  #   command: certonly --webroot --webroot-path=/usr/share/nginx/html --email JoshR.AndersonEng@gmail.com --agree-tos --no-eff-email --staging -d joshrand.xyz -d www.joshrand.xyz
    
volumes:
  certs:
    driver: local
    driver_opts:
      type: none
      device: ./certs/
      o: bind
  frontend-data:
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: ./dhparam/
      o: bind

networks:
  angular-spring: {}
  spring-mysql: {}
