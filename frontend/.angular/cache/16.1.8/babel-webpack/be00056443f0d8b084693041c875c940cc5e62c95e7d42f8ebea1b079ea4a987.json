{"ast":null,"code":"import { Particle } from '../model/particle';\nimport { Vec2 } from '../math/vec2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/icon\";\nconst _c0 = function () {\n  return [\"/portfolio\"];\n};\nexport let HomeComponent = /*#__PURE__*/(() => {\n  class HomeComponent {\n    constructor() {\n      // Test array for particles\n      this.particles = [];\n      // Particle end boolean\n      this.particle_condition = false;\n      // gravity for particles\n      this.gravity = new Vec2(0, 0.009);\n      // Test array for grid\n      this.test_array = new Array(12);\n      // Text to type\n      this.text_array = new Array(\"Hi there, my name is Joshua Anderson. \", \"I'm a Computer Engineer who loves developing with new Technologies. \", \"I'm also a Full-Stack Java Web developer. \", \"Check out my projects below!\");\n      // Chosen Array from Initial Position\n      this.chosen_array = this.text_array[0];\n      // in ms\n      this.text_delay = 16;\n      // animation speed 60hz - 240hz\n      this.animation_speed = 20;\n      // Initial position of Array List\n      this.array_position = 0;\n      // Initial count of current chosen array from array list\n      this.count = 0;\n    }\n    ngOnInit() {\n      this.canvas = document.getElementById('canvas');\n      this.canvas.width = window.innerWidth;\n      this.canvas.height = window.innerHeight;\n      let doc = document.getElementById(\"navbar\").style.top = \"0\";\n      this.timeout_one = setTimeout(() => {\n        this.TypeText();\n      }, 100);\n    }\n    // TODO:: Change to setInterval instead of setTimeout\n    TypeText() {\n      try {\n        // retrieves element from document for introduction\n        var introduction_text_holder = document.getElementById(\"introduction-text\");\n        // retrieves element of cursor to act as partical fountain guide\n        var cursor_for_particles = document.getElementById(\"cursor\");\n        // Sends all to the document element \"introduction-text\"\n        // this.text_array.forEach(element => {\n        //   introduction_text_holder.innerHTML += element;\n        // });\n        var rect = cursor_for_particles.getBoundingClientRect();\n        // start partical emmission \n        if (this.count == 0 && this.array_position == 0) setTimeout(() => {\n          this.DrawOnCanvas(rect.left - 1, rect.top + 10);\n        }, this.animation_speed);\n        // if the count is not equal to text_array length then ++ count\n        if (this.count <= this.chosen_array.length - 1) {\n          // append string at count position into the html object\n          introduction_text_holder.innerHTML += this.chosen_array[this.count];\n          // Debugging\n          //console.log(\"TypeText entered If statement; Array Length= \" + this.text_array.length + \" chosen array = \"+this.array_position+\" and count= \" + this.count)\n          this.count++;\n        }\n        // if statement for printing the next string in the text_array\n        else if (this.array_position != this.text_array.length && this.count == this.chosen_array.length) {\n          this.array_position++;\n          //console.log(\"selecting new string next position is \" +this.array_position);\n          this.chosen_array = this.text_array[this.array_position];\n          this.count = 0;\n          if (this.array_position != this.text_array.length) introduction_text_holder.innerHTML += \"\";\n          // condition is met, exit from the recurrsion \n          // console.log(this.array_position + \" \" + this.text_array.length);\n          // console.log(\"clearing timeout\")\n          // clearTimeout(this.timeout_one);\n          // clearTimeout(this.timeout_two);\n        }\n        // trying to recursivly call the typetext method\n        if (this.array_position != this.text_array.length) {\n          this.timeout_two = setTimeout(() => {\n            this.TypeText();\n          }, this.text_delay);\n        } else {\n          this.particle_condition = true;\n          this.showButton();\n        }\n        //setTimeout(()=>{console.log(\"2000\")},2000);\n      } catch (error) {}\n    }\n    Reset() {\n      var introduction_text_holder = document.getElementById(\"introduction-text\");\n      introduction_text_holder.innerHTML = \"\";\n      //console.log(\"Reset was pressed\");\n      // reset chosen array\n      this.chosen_array = this.text_array[0];\n      // reset array position\n      this.array_position = 0;\n      // Initial count of current chosen array from array list\n      this.count = 0;\n    }\n    DrawOnCanvas(x, y) {\n      // Get cursor element for location of its relative top and bottom\n      var cursor_for_particles = document.getElementById(\"cursor\");\n      var ctx = this.canvas.getContext('2d');\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      // fill particle array\n      if (!this.particle_condition) {\n        for (let i = 0; i < 5; i++) {\n          this.particles.push(new Particle(x, y, 'AAFF00'));\n        }\n      }\n      // update each particle / show canvas\n      for (let particle of this.particles) {\n        particle.applyForce(this.gravity);\n        particle.update();\n        particle.show(ctx);\n      }\n      //console.log(\"\"+ this.particles.length + \" Particles\")\n      // delete finished particles\n      for (let i = this.particles.length - 1; i >= 0; i--) {\n        if (!this.particles[i].finished()) {\n          //console.log(\"finished particle in position\" + i);\n          this.particles.splice(i, 1);\n        }\n      }\n      if (this.particles.length != 0) {\n        try {\n          var rect = cursor_for_particles.getBoundingClientRect();\n          //console.log(document.body.scrollTop);\n          setTimeout(() => {\n            this.DrawOnCanvas(rect.left - 1, rect.top + 10);\n          }, this.animation_speed);\n        } catch (error) {}\n      }\n    }\n    showButton() {\n      console.log(\"show button\");\n      let element = document.getElementById(\"portfolio-button\");\n      var op = 0; // initial opacity\n      var timer = setInterval(function () {\n        if (op >= 1) {\n          clearInterval(timer);\n        }\n        element.style.opacity = op.toString();\n        op += 0.005;\n      }, 11);\n    }\n  }\n  HomeComponent.ɵfac = function HomeComponent_Factory(t) {\n    return new (t || HomeComponent)();\n  };\n  HomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeComponent,\n    selectors: [[\"app-home\"]],\n    decls: 16,\n    vars: 2,\n    consts: [[1, \"main-div\"], [1, \"introduction-container\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 2, \"visibility\", \"hidden\", 3, \"click\"], [1, \"introduction\"], [\"id\", \"introduction-text\"], [\"id\", \"cursor\", 1, \"blinking_cursor\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", \"id\", \"portfolio-button\", 1, \"portfolio-button\", 3, \"routerLink\"], [\"id\", \"canvas\", \"width\", \"100%\", \"height\", \"100%\"]],\n    template: function HomeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function HomeComponent_Template_button_click_2_listener() {\n          return ctx.Reset();\n        });\n        i0.ɵɵtext(3, \"Debug Reset Type Text\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"br\")(5, \"br\");\n        i0.ɵɵelementStart(6, \"h1\", 3);\n        i0.ɵɵelement(7, \"span\", 4);\n        i0.ɵɵelementStart(8, \"span\", 5);\n        i0.ɵɵtext(9, \"_\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(10, \"p\");\n        i0.ɵɵelementStart(11, \"button\", 6);\n        i0.ɵɵtext(12, \"View my Portfolio\");\n        i0.ɵɵelementStart(13, \"mat-icon\");\n        i0.ɵɵtext(14, \"keyboard_arrow_right\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(15, \"canvas\", 7);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c0));\n      }\n    },\n    dependencies: [i1.RouterLink, i2.MatButton, i3.MatIcon],\n    styles: [\"canvas[_ngcontent-%COMP%]{position:fixed;overflow:hidden;top:0;left:0;image-rendering:optimizeQuality;pointer-events:none}.blinking_cursor[_ngcontent-%COMP%]{color:violet;animation:_ngcontent-%COMP%_blink-cursor 1s step-end infinite;text-shadow:none}.introduction[_ngcontent-%COMP%]{font-family:monospace;font-style:bold;width:1000px}.portfolio-button[_ngcontent-%COMP%]{margin-top:50px;border-radius:0;opacity:0;color:#adff2f}.portfolio-button[_ngcontent-%COMP%]:hover{background-color:transparent;border:1pt white solid;color:#fff}@keyframes _ngcontent-%COMP%_blink-cursor{0%,to{color:transparent}50%{color:#fff}}@media only screen and (min-width: 1000px){.grid[_ngcontent-%COMP%]{grid-template-columns:repeat(3,1fr)}.grid-item1[_ngcontent-%COMP%]{grid-column:1/4;grid-row:1/1;height:500px}.introduction-container[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;margin-top:-200px;margin-left:-500px;height:300px;text-align:center}}@media only screen and (max-width: 1000px){.grid[_ngcontent-%COMP%]{grid-template-columns:repeat(1,1fr)}.grid-item1[_ngcontent-%COMP%]{height:200px}.introduction[_ngcontent-%COMP%]{font-size:14px;width:340px;padding-left:5px}.introduction-container[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;margin-top:-200px;margin-left:-175px;height:300px;text-align:center}}\"]\n  });\n  return HomeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}